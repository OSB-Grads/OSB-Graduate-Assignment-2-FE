# frontend-cd.yml
resources:
  pipelines:
    - pipeline: frontend-ci
      source: frontend-ci
      trigger:
        branches:
          include:
            - main

pr: none

variables:
  myServiceConnection: "MyAzureServiceConnection"
  resourceGroup: "rg-banking-app"
  appServiceName: "frontend-appservice"
  acrName: "bankingacr"                  # short name or full login server OK
  imageName: "frontend-ci"
  imageTag: "v$(resources.pipeline.frontend-ci.runId)"

stages:
  - stage: Deploy
    displayName: "Deploy Frontend to App Service"
    jobs:
      - job: DeployToAppService
        pool:
          name: Default
        steps:
          - checkout: self

          - powershell: |
              Write-Host "=== Frontend CD DEBUG ==="
              Write-Host ("RESOURCE_GROUP: {0}" -f "$(resourceGroup)")
              Write-Host ("APP_SERVICE: {0}" -f "$(appServiceName)")
              Write-Host ("ACR_NAME: {0}" -f "$(acrName)")
              Write-Host ("IMAGE_NAME: {0}" -f "$(imageName)")
              Write-Host ("IMAGE_TAG: {0}" -f "$(imageTag)")
            displayName: "Print chosen variables (DEBUG) - REMOVE AFTER DEBUGGING"

          - powershell: |
              $azDir = "$(Agent.TempDirectory)\.az"
              New-Item -ItemType Directory -Force -Path $azDir | Out-Null
              Write-Host ("Prepared AZ config dir: {0}" -f $azDir)
            displayName: "Prepare AZ config dir"

          - task: AzureCLI@2
            displayName: "Deploy image from ACR -> App Service (all inside authenticated az context)"
            inputs:
              azureSubscription: "$(myServiceConnection)"
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                try {
                  Write-Host "=== AzureCLI inline script starting ==="

                  # ensure az cli uses a writable config dir
                  $env:AZURE_CONFIG_DIR = "$(Agent.TempDirectory)\.az"
                  New-Item -ItemType Directory -Force -Path $env:AZURE_CONFIG_DIR | Out-Null
                  Write-Host ("AZURE_CONFIG_DIR = {0}" -f $env:AZURE_CONFIG_DIR)

                  # Read pipeline variables (expanded into the script by Azure DevOps)
                  $resourceGroup = "$(resourceGroup)"
                  $appService    = "$(appServiceName)"
                  $acrName       = "$(acrName)"
                  $imageName     = "$(imageName)"
                  $imageTag      = "$(imageTag)"

                  Write-Host ("ResourceGroup: {0}" -f $resourceGroup)
                  Write-Host ("AppService:    {0}" -f $appService)
                  Write-Host ("ACR (input):   {0}" -f $acrName)
                  Write-Host ("Image (input): {0}:{1}" -f $imageName, $imageTag)

                  # Decide ACR login server
                  if ($acrName -match "\.") {
                      $acrLoginServer = $acrName
                  } else {
                      $acrLoginServer = "$($acrName).azurecr.io"
                  }
                  Write-Host ("ACR login server: {0}" -f $acrLoginServer)

                  # THIS runs inside AzureCLI@2 and IS authenticated by the service connection.
                  Write-Host "Fetching ACR credentials (inside authenticated AzureCLI task)..."
                  $acrUser = az acr credential show --name $acrName --query "username" -o tsv
                  $acrPwd  = az acr credential show --name $acrName --query "passwords[0].value" -o tsv

                  if (-not $acrUser -or -not $acrPwd) {
                      Write-Error "Failed to obtain ACR credentials. Ensure the service connection has permission to access ACR."
                      exit 1
                  }
                  Write-Host ("ACR credentials retrieved (username length: {0})." -f $($acrUser.Length))

                  # Build full image
                  $fullImage = "$($acrLoginServer)/$($imageName):$($imageTag)"
                  Write-Host ("Full image: {0}" -f $fullImage)

                  Write-Host "Setting App Service to use image and registry credentials..."
                  az webapp config container set `
                    --name $appService `
                    --resource-group $resourceGroup `
                    --docker-custom-image-name $fullImage `
                    --docker-registry-server-url "https://$acrLoginServer" `
                    --docker-registry-server-user $acrUser `
                    --docker-registry-server-password $acrPwd | Out-Null

                  Write-Host "Restarting App Service..."
                  az webapp restart --name $appService --resource-group $resourceGroup | Out-Null

                  # Small verification: show current container config
                  Write-Host "Verifying container settings..."
                  $cfg = az webapp config container show --name $appService --resource-group $resourceGroup -o json | ConvertFrom-Json
                  Write-Host ("Configured image: {0}" -f $cfg.DOCKER_CUSTOM_IMAGE_NAME)

                  Write-Host (" Deployment finished successfully: {0} -> {1}" -f $fullImage, $appService)
                } catch {
                  Write-Error "Deployment failed: $_"
                  exit 1
                }
